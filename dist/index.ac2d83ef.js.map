{"mappings":"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","sources":["script.js"],"sourcesContent":["'use strict';\n\n\n\n\nconst form = document.querySelector('.form');\nconst containerWorkouts = document.querySelector('.workouts');\nconst inputType = document.querySelector('.form__input--type');\nconst inputDistance = document.querySelector('.form__input--distance');\nconst inputDuration = document.querySelector('.form__input--duration');\nconst inputCadence = document.querySelector('.form__input--cadence');\nconst inputElevation = document.querySelector('.form__input--elevation');\n\n//creating workout\n//creating parent workout class\nclass Workout {\n    date = new Date();\n    id = (Date.now() + '').slice(-10);\n    constructor(distance, duration, coords) {\n        this.distance = distance;\n        this.duration = duration;\n        this.coords = coords;\n    }\n    _setDescription() {\n        // prettier-ignore\n        const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    \n        this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${\n          months[this.date.getMonth()]\n        } ${this.date.getDate()}`;\n      }\n\n};\n//creating child class (running)\nclass Running extends Workout {\n    type = 'running';\n    constructor(distance, duration, coords, cadence) {\n        super(distance, duration, coords);\n        this.cadence = cadence;\n        this.calcPace();\n        this._setDescription();\n    }\n    calcPace() {\n        this.pace = this.duration / this.distance;\n    }\n}\n\n//creating chhild class  (Cycling)\nclass Cycling extends Workout {\n    type = 'cycling';\n    constructor(distance, duration, coords, elevationGain) {\n        super(distance, duration, coords)\n        this.elevationGain = elevationGain;\n        this.calcSpeed();\n        this._setDescription();\n\n    }\n    calcSpeed() {\n        this.speed = this.distance / (this.duration / 60);\n    }\n}\n\n///////////Refactoring project architecture\n//create a class called 'App\nclass App {\n    #map;\n    #mapEvent;\n    #workouts = [];\n    clicks = 0;\n    constructor() {\n        this._getPosition();\n        this._getLocalStorage();\n        form.addEventListener('submit', this._newWorkout.bind(this));\n        //implementing change in inputs \n        inputType.addEventListener('change', this._toggleElevationField.bind(this));\n        //implementing moving to marker when we clicked on workout\n        containerWorkouts.addEventListener('click', this._moveToPopup.bind(this))\n\n\n    }\n\n    //methods\n    _getPosition() {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(this._loadMap.bind(this), function () { alert('could not get your position') });\n        }\n\n    }\n    _loadMap(position) {\n        //displaying map\n        const latitude = position.coords.latitude;\n        const longitude = position.coords.longitude;\n        const cords = [latitude, longitude]\n        // console.log(`https://www.google.com/maps/@${latitude},${longitude}`);//link to my current loction in google maps.\n        // console.log(latitude, longitude);\n        this.#map = L.map('map').setView(cords, 13);\n\n        L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {\n            attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n        }).addTo(this.#map);\n        this.#map.on('click', this._showForm.bind(this));\n        this.#workouts.forEach(work=>this.renderWorkoutMarker(work))\n\n    }\n\n    _showForm(mapE) {\n        //creating marker on click\n        form.classList.remove('hidden');\n        inputDistance.focus();\n        this.#mapEvent = mapE;\n    }\n    _hideForm() {\n        inputCadence.value = inputDistance.value = inputDuration.value = inputElevation.value = '';\n        form.style.display = 'none';\n        form.classList.add('hidden');\n        setTimeout(() => form.style.display = 'grid', 1000)\n    }\n\n    _toggleElevationField() {\n        inputCadence.closest('.form__row').classList.toggle('form__row--hidden');\n        inputElevation.closest('.form__row').classList.toggle('form__row--hidden');\n    }\n\n    _newWorkout(e) {\n        e.preventDefault();\n        let workout;\n        //create helper functions for validations\n        const validInputs = (...inputs) => (inputs.every(ele => Number.isFinite(ele)));\n        const positiveInuts = (...inputs) => inputs.every(ele => ele > 0)\n\n        //get data from form\n        const type = inputType.value;\n        const distance = +inputDistance.value;\n        const duration = +inputDuration.value;\n        const { lat, lng } = this.#mapEvent.latlng;\n        const coords = [lat, lng];\n\n        //if activity is running create runnning object\n        if (type == 'running') {\n            const type = 'running';\n            const cadence = +inputCadence.value;\n\n            //check data is valid\n            if (!validInputs(distance, duration, cadence) || !positiveInuts(distance, duration, cadence))\n                return alert('The inputs must be a positive integers ');\n            workout = new Running(distance, duration, coords, cadence);\n        }\n\n        //if activity is cycling create cycling object\n        if (type == 'cycling') {\n            const type = 'cycling'\n            const elevationGain = +inputElevation.value;\n            if (!validInputs(distance, duration) || !positiveInuts(distance, duration))\n                return alert('the inputs must be a positive integers ');\n            workout = new Cycling(distance, duration, coords, elevationGain)\n        }\n\n        //Add new object to workout array\n        this.#workouts.push(workout);\n\n\n        //invoking renderWorkout method\n        this.renderWorkout(workout)\n\n        this.renderWorkoutMarker(workout);\n\n        //hide form and clear input fields \n        this._hideForm();\n        //invoke local storage data\n        this._setLocalStorage();\n       \n\n\n\n    }\n    renderWorkoutMarker(workout){\n         //render workout on map as a markeer\n         L.marker(workout.coords, { riseOnHover: true, }).addTo(this.#map)\n         .bindPopup(L.popup({\n             maxWidth: 200,\n             maxHeight: 30,\n             autoClose: false,\n             closeOnClick: false,\n             className: `${workout.type}-popup`,\n         }))\n         .setPopupContent(`${workout.description}`)\n         .openPopup();\n    }\n\n    //Render workout on list \n    renderWorkout(workout) {\n        let html = ` <li class=\"workout workout--${workout.type}\" data-id=\"${workout.id}\">\n        <h2 class=\"workout__title\">${workout.description}</h2>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">${workout.type === 'running' ? '🏃‍♂️' : '🚴‍♀️'}</span>\n          <span class=\"workout__value\">${workout.distance}</span>\n          <span class=\"workout__unit\">km</span>\n        </div>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">⏱</span>\n          <span class=\"workout__value\">${workout.duration}</span>\n          <span class=\"workout__unit\">min</span>\n        </div>`\n        //implementing cadence and elevation\n        if (workout.type === 'running') {\n            html += ` <div class=\"workout__details\">\n            <span class=\"workout__icon\">⚡️</span>\n            <span class=\"workout__value\">${workout.pace}</span>\n            <span class=\"workout__unit\">min/km</span>\n          </div>\n          <div class=\"workout__details\">\n            <span class=\"workout__icon\">🦶🏼</span>\n            <span class=\"workout__value\">17${workout.cadence}</span>\n            <span class=\"workout__unit\">spm</span>\n          </div>\n        </li>`\n        }\n        if (workout.type === 'cycling') {\n            html += `<div class=\"workout__details\">\n            <span class=\"workout__icon\">⚡️</span>\n            <span class=\"workout__value\">${workout.speed}</span>\n            <span class=\"workout__unit\">km/h</span>\n          </div>\n          <div class=\"workout__details\">\n            <span class=\"workout__icon\">⛰</span>\n            <span class=\"workout__value\">${workout.elevationGain}</span>\n            <span class=\"workout__unit\">m</span>\n          </div>\n        </li>`\n        }\n        form.insertAdjacentHTML(\"afterend\", html);\n    }\n\n    //_moveToPopup method\n    _moveToPopup(e) {\n        if (!this.#map) return;\n        const workoutEl = e.target.closest('.workout');\n        // console.log(workoutEl);\n        if (!workoutEl) return;\n        const workout = this.#workouts.find(work => work.id === workoutEl.dataset.id);\n        this.#map.setView(workout.coords, '13', {\n            animation: true,\n            pan: {\n                duration: 1,\n            }\n        })\n        this._countClicks();\n    }\n    _countClicks() {\n        this.clicks++;\n        console.log(this.clicks)\n    }\n    _setLocalStorage() {\n        localStorage.setItem('workouts', JSON.stringify(this.#workouts));\n    }\n    _getLocalStorage() {\n        const data = JSON.parse(localStorage.getItem('workouts'));\n        console.log(data);\n        if (!data) return;\n\n        this.#workouts = data;\n        this.#workouts.forEach(work => {\n            this.renderWorkout(work);\n        })\n\n    }\n\n\n\n}\nconst app = new App();\n//End of project\n\n\n\n\n\n\n\n"],"names":["form","document","querySelector","containerWorkouts","inputType","inputDistance","inputDuration","inputCadence","inputElevation","Workout","date","Date","id","now","slice","distance","duration","coords","this","_setDescription","description","type","toUpperCase","getMonth","getDate","Running","cadence","super","calcPace","pace","Cycling","elevationGain","calcSpeed","speed","App","map","mapEvent","workouts","clicks","_getPosition","_getLocalStorage","addEventListener","_newWorkout","bind","_toggleElevationField","_moveToPopup","navigator","geolocation","getCurrentPosition","_loadMap","alert","position","cords","latitude","longitude","L","setView","tileLayer","attribution","addTo","on","_showForm","forEach","work","renderWorkoutMarker","mapE","classList","remove","focus","_hideForm","value","style","display","add","setTimeout","closest","toggle","e","workout","preventDefault","validInputs","inputs","every","ele","Number","isFinite","positiveInuts","lat","lng","latlng","push","renderWorkout","_setLocalStorage","marker","riseOnHover","bindPopup","popup","maxWidth","maxHeight","autoClose","closeOnClick","className","setPopupContent","openPopup","html","insertAdjacentHTML","workoutEl","target","find","dataset","animation","pan","_countClicks","console","log","localStorage","setItem","JSON","stringify","data","parse","getItem","app"],"version":3,"file":"index.ac2d83ef.js.map"}